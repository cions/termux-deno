--- a/Cargo.toml
+++ b/Cargo.toml
@@ -178,5 +178,5 @@ version = "0.1.2"
 [dev-dependencies.rand]
 version = "=0.8.5"
 
-[target.'cfg(any(target_os = "linux", target_os = "macos"))'.dependencies.tokio-vsock]
+[target.'cfg(any(target_os = "android", target_os = "linux", target_os = "macos"))'.dependencies.tokio-vsock]
 version = "0.7"
--- a/http_next.rs
+++ b/http_next.rs
@@ -1057,7 +1057,7 @@ where
     NetworkStream::Unix(conn) => {
       serve_http(conn, connection_properties, lifetime, tx, options)
     }
-    #[cfg(any(target_os = "linux", target_os = "macos"))]
+    #[cfg(any(target_os = "android", target_os = "linux", target_os = "macos"))]
     NetworkStream::Vsock(conn) => {
       serve_http(conn, connection_properties, lifetime, tx, options)
     }
--- a/lib.rs
+++ b/lib.rs
@@ -1684,7 +1684,7 @@ fn extract_network_stream<U: CanDowncastUpgrade>(
       Ok(res) => return res,
       Err(x) => x,
     };
-  #[cfg(any(target_os = "linux", target_os = "macos"))]
+  #[cfg(any(target_os = "android", target_os = "linux", target_os = "macos"))]
   let upgraded =
     match maybe_extract_network_stream::<tokio_vsock::VsockStream, _>(upgraded)
     {
--- a/request_properties.rs
+++ b/request_properties.rs
@@ -165,7 +165,7 @@ impl HttpPropertyExtractor for DefaultHttpPropertyExtractor {
       NetworkStreamAddress::Ip(ip) => Some(ip.port() as _),
       #[cfg(unix)]
       NetworkStreamAddress::Unix(_) => None,
-      #[cfg(any(target_os = "linux", target_os = "macos"))]
+      #[cfg(any(target_os = "android", target_os = "linux", target_os = "macos"))]
       NetworkStreamAddress::Vsock(vsock) => Some(vsock.port()),
       NetworkStreamAddress::Tunnel(ref addr) => Some(addr.port() as _),
     };
@@ -173,7 +173,7 @@ impl HttpPropertyExtractor for DefaultHttpPropertyExtractor {
       NetworkStreamAddress::Ip(addr) => Rc::from(addr.ip().to_string()),
       #[cfg(unix)]
       NetworkStreamAddress::Unix(_) => Rc::from("unix"),
-      #[cfg(any(target_os = "linux", target_os = "macos"))]
+      #[cfg(any(target_os = "android", target_os = "linux", target_os = "macos"))]
       NetworkStreamAddress::Vsock(addr) => {
         Rc::from(format!("vsock:{}", addr.cid()))
       }
@@ -216,7 +216,7 @@ fn listener_properties(
     NetworkStreamAddress::Ip(ip) => Some(ip.port() as _),
     #[cfg(unix)]
     NetworkStreamAddress::Unix(_) => None,
-    #[cfg(any(target_os = "linux", target_os = "macos"))]
+    #[cfg(any(target_os = "android", target_os = "linux", target_os = "macos"))]
     NetworkStreamAddress::Vsock(vsock) => Some(vsock.port()),
     NetworkStreamAddress::Tunnel(addr) => Some(addr.port() as _),
   };
@@ -263,7 +263,7 @@ fn req_host_from_addr(
       percent_encoding::NON_ALPHANUMERIC,
     )
     .to_string(),
-    #[cfg(any(target_os = "linux", target_os = "macos"))]
+    #[cfg(any(target_os = "android", target_os = "linux", target_os = "macos"))]
     NetworkStreamAddress::Vsock(vsock) => {
       format!("{}:{}", vsock.cid(), vsock.port())
     }
@@ -283,7 +283,7 @@ fn req_scheme_from_stream_type(stream_type: NetworkStreamType) -> &'static str {
     NetworkStreamType::Tls | NetworkStreamType::Tunnel => "https://",
     #[cfg(unix)]
     NetworkStreamType::Unix => "http+unix://",
-    #[cfg(any(target_os = "linux", target_os = "macos"))]
+    #[cfg(any(target_os = "android", target_os = "linux", target_os = "macos"))]
     NetworkStreamType::Vsock => "http+vsock://",
   }
 }
@@ -309,7 +309,7 @@ fn req_host<'a>(
       }
       #[cfg(unix)]
       NetworkStreamType::Unix => {}
-      #[cfg(any(target_os = "linux", target_os = "macos"))]
+      #[cfg(any(target_os = "android", target_os = "linux", target_os = "macos"))]
       NetworkStreamType::Vsock => {}
     }
     return Some(Cow::Borrowed(auth.as_str()));
