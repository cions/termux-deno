--- a/Cargo.toml
+++ b/Cargo.toml
@@ -161,5 +161,5 @@ version = "0.3.2"
 [dev-dependencies.fast-socks5]
 version = "0.9.6"
 
-[target.'cfg(any(target_os = "linux", target_os = "macos"))'.dependencies.tokio-vsock]
+[target.'cfg(any(target_os = "android", target_os = "linux", target_os = "macos"))'.dependencies.tokio-vsock]
 version = "0.7"
--- a/lib.rs
+++ b/lib.rs
@@ -1212,12 +1212,12 @@ pub fn create_http_client(
       Proxy::Unix { .. } => {
         return Err(HttpClientCreateError::UnixProxyNotSupportedOnWindows);
       }
-      #[cfg(any(target_os = "linux", target_os = "macos"))]
+      #[cfg(any(target_os = "android", target_os = "linux", target_os = "macos"))]
       Proxy::Vsock { cid, port } => {
         let target = proxy::Target::new_vsock(cid, port);
         proxy::Intercept::all(target)
       }
-      #[cfg(not(any(target_os = "linux", target_os = "macos")))]
+      #[cfg(not(any(target_os = "android", target_os = "linux", target_os = "macos")))]
       Proxy::Vsock { .. } => {
         return Err(HttpClientCreateError::VsockProxyNotSupported);
       }
--- a/proxy.rs
+++ b/proxy.rs
@@ -31,7 +31,7 @@ use tokio::net::UnixStream;
 use tokio_rustls::client::TlsStream;
 use tokio_rustls::TlsConnector;
 use tokio_socks::tcp::Socks5Stream;
-#[cfg(any(target_os = "linux", target_os = "macos"))]
+#[cfg(any(target_os = "android", target_os = "linux", target_os = "macos"))]
 use tokio_vsock::VsockStream;
 use tower_service::Service;
 
@@ -77,7 +77,7 @@ pub(crate) enum Target {
   Unix {
     path: PathBuf,
   },
-  #[cfg(any(target_os = "linux", target_os = "macos"))]
+  #[cfg(any(target_os = "android", target_os = "linux", target_os = "macos"))]
   Vsock {
     cid: u32,
     port: u32,
@@ -170,7 +170,7 @@ impl Intercept {
       Target::Unix { .. } => {
         // Auth not supported for Unix sockets
       }
-      #[cfg(any(target_os = "linux", target_os = "macos"))]
+      #[cfg(any(target_os = "android", target_os = "linux", target_os = "macos"))]
       Target::Vsock { .. } => {
         // Auth not supported for Vsock sockets
       }
@@ -257,7 +257,7 @@ impl Target {
     Target::Unix { path }
   }
 
-  #[cfg(any(target_os = "linux", target_os = "macos"))]
+  #[cfg(any(target_os = "android", target_os = "linux", target_os = "macos"))]
   pub(crate) fn new_vsock(cid: u32, port: u32) -> Self {
     Target::Vsock { cid, port }
   }
@@ -466,7 +466,7 @@ pub enum Proxied<T> {
   #[cfg(not(windows))]
   Unix(TokioIo<UnixStream>),
   /// Forwarded via Vsock socket
-  #[cfg(any(target_os = "linux", target_os = "macos"))]
+  #[cfg(any(target_os = "android", target_os = "linux", target_os = "macos"))]
   Vsock(TokioIo<VsockStream>),
 }
 
@@ -572,7 +572,7 @@ where
             Ok(Proxied::Unix(TokioIo::new(io)))
           })
         }
-        #[cfg(any(target_os = "linux", target_os = "macos"))]
+        #[cfg(any(target_os = "android", target_os = "linux", target_os = "macos"))]
         Target::Vsock { cid, port } => Box::pin(async move {
           let addr = tokio_vsock::VsockAddr::new(cid, port);
           let io = VsockStream::connect(addr).await?;
@@ -689,7 +689,7 @@ where
       Proxied::SocksTls(ref mut p) => Pin::new(p).poll_read(cx, buf),
       #[cfg(not(windows))]
       Proxied::Unix(ref mut p) => Pin::new(p).poll_read(cx, buf),
-      #[cfg(any(target_os = "linux", target_os = "macos"))]
+      #[cfg(any(target_os = "android", target_os = "linux", target_os = "macos"))]
       Proxied::Vsock(ref mut p) => Pin::new(p).poll_read(cx, buf),
     }
   }
@@ -712,7 +712,7 @@ where
       Proxied::SocksTls(ref mut p) => Pin::new(p).poll_write(cx, buf),
       #[cfg(not(windows))]
       Proxied::Unix(ref mut p) => Pin::new(p).poll_write(cx, buf),
-      #[cfg(any(target_os = "linux", target_os = "macos"))]
+      #[cfg(any(target_os = "android", target_os = "linux", target_os = "macos"))]
       Proxied::Vsock(ref mut p) => Pin::new(p).poll_write(cx, buf),
     }
   }
@@ -729,7 +729,7 @@ where
       Proxied::SocksTls(ref mut p) => Pin::new(p).poll_flush(cx),
       #[cfg(not(windows))]
       Proxied::Unix(ref mut p) => Pin::new(p).poll_flush(cx),
-      #[cfg(any(target_os = "linux", target_os = "macos"))]
+      #[cfg(any(target_os = "android", target_os = "linux", target_os = "macos"))]
       Proxied::Vsock(ref mut p) => Pin::new(p).poll_flush(cx),
     }
   }
@@ -746,7 +746,7 @@ where
       Proxied::SocksTls(ref mut p) => Pin::new(p).poll_shutdown(cx),
       #[cfg(not(windows))]
       Proxied::Unix(ref mut p) => Pin::new(p).poll_shutdown(cx),
-      #[cfg(any(target_os = "linux", target_os = "macos"))]
+      #[cfg(any(target_os = "android", target_os = "linux", target_os = "macos"))]
       Proxied::Vsock(ref mut p) => Pin::new(p).poll_shutdown(cx),
     }
   }
@@ -760,7 +760,7 @@ where
       Proxied::SocksTls(ref p) => p.is_write_vectored(),
       #[cfg(not(windows))]
       Proxied::Unix(ref p) => p.is_write_vectored(),
-      #[cfg(any(target_os = "linux", target_os = "macos"))]
+      #[cfg(any(target_os = "android", target_os = "linux", target_os = "macos"))]
       Proxied::Vsock(ref p) => p.is_write_vectored(),
     }
   }
@@ -784,7 +784,7 @@ where
       Proxied::SocksTls(ref mut p) => Pin::new(p).poll_write_vectored(cx, bufs),
       #[cfg(not(windows))]
       Proxied::Unix(ref mut p) => Pin::new(p).poll_write_vectored(cx, bufs),
-      #[cfg(any(target_os = "linux", target_os = "macos"))]
+      #[cfg(any(target_os = "android", target_os = "linux", target_os = "macos"))]
       Proxied::Vsock(ref mut p) => Pin::new(p).poll_write_vectored(cx, bufs),
     }
   }
@@ -817,7 +817,7 @@ where
       }
       #[cfg(not(windows))]
       Proxied::Unix(_) => Connected::new(),
-      #[cfg(any(target_os = "linux", target_os = "macos"))]
+      #[cfg(any(target_os = "android", target_os = "linux", target_os = "macos"))]
       Proxied::Vsock(_) => Connected::new(),
     }
   }
